---
source: tests/vm.rs
expression: register_state
---
Ok([Empty, Literal(Integer(3)), Object(RefCell { value: Object { fields: {"inner_value": RefCell { value: Literal(Integer(32)) }} } }), Literal(String("inner_value")), Literal(Integer(32)), Object(RefCell { value: Object { fields: {"test": RefCell { value: Literal(Integer(1)) }, "test2": RefCell { value: Literal(String("testing")) }, "test3": RefCell { value: Literal(Integer(3)) }, "test4": RefCell { value: Object(RefCell { value: Object { fields: {"inner_value": RefCell { value: Literal(Integer(32)) }} } }) }, "test5": RefCell { value: Object(RefCell { value: Object { fields: {"test6": RefCell { value: Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }) }} } }) }} } }), Literal(String("test")), Literal(Integer(1)), Literal(String("test2")), Literal(String("testing")), Literal(String("test3")), Literal(String("test4")), Literal(String("test5")), Object(RefCell { value: Object { fields: {"test6": RefCell { value: Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }) }} } }), Literal(String("test6")), Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }), Literal(String("test7")), Literal(Integer(1999)), Object(RefCell { value: Object { fields: {"test": RefCell { value: Literal(Integer(1)) }, "test2": RefCell { value: Literal(String("testing")) }, "test3": RefCell { value: Literal(Integer(3)) }, "test4": RefCell { value: Object(RefCell { value: Object { fields: {"inner_value": RefCell { value: Literal(Integer(32)) }} } }) }, "test5": RefCell { value: Object(RefCell { value: Object { fields: {"test6": RefCell { value: Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }) }} } }) }} } }), Literal(String("print")), Empty, Literal(Integer(1)), Literal(String("test")), Literal(Integer(1)), Literal(String("print")), Empty, Literal(String("testing")), Literal(String("test2")), Literal(String("testing")), Literal(String("print")), Empty, Literal(Integer(3)), Literal(String("test3")), Literal(Integer(3)), Literal(String("print")), Empty, Object(RefCell { value: Object { fields: {"inner_value": RefCell { value: Literal(Integer(32)) }} } }), Literal(String("test4")), Object(RefCell { value: Object { fields: {"inner_value": RefCell { value: Literal(Integer(32)) }} } }), Literal(String("print")), Empty, Literal(Integer(32)), Literal(String("test4")), Literal(String("inner_value")), Literal(Integer(32)), Literal(String("print")), Empty, Object(RefCell { value: Object { fields: {"test6": RefCell { value: Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }) }} } }), Literal(String("test5")), Object(RefCell { value: Object { fields: {"test6": RefCell { value: Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }) }} } }), Literal(String("print")), Empty, Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }), Literal(String("test5")), Literal(String("test6")), Object(RefCell { value: Object { fields: {"test7": RefCell { value: Literal(Integer(1999)) }} } }), Literal(String("print")), Empty, Literal(Integer(1999)), Literal(String("test5")), Literal(String("test6")), Literal(String("test7")), Literal(Integer(1999)), Literal(String("print")), Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty, Empty])
